#!/usr/bin/tclsh

package require http

# Cleans up a subject line
proc clean_subject {subject} {

	# Remove all "Re:" and "Fwd:"
	while {[regsub -nocase {^(re|fwd):\s+} $subject "" subject] != 0} {}

	# Get rid of @ and ::, since it messes up Omnifocus parsing
	set subject [string map -nocase {@ at :: {}} $subject]

	# Standardize FogBugz bug reference (from FogBugz emails)
	set subject [regsub {FogBugz \(Case ([0-9]+)\)} $subject {FB\1}]

	return $subject
}


# If this is a Fogbugz email, get the sender from the message body
proc get_sender_from_fogbugz {body} {
	set patterns {
		{A FogBugz case was edited by (.+)\.$}
		{A FogBugz case was closed by (.+)\.$}
		{A new case was assigned to you in FogBugz by (.+)\.$}
	}

	foreach pattern $patterns {
		regexp -line -nocase $pattern $body _ name
		if {[info exists name]} {
			return $name
		}
	}

	return ""
}


set senderName $env(MM_SENDER_NAME)

# If the sender is me, then really what I want is the recipient
if {$senderName eq "James Sulak"} {
	set senderName $env(MM_TO_NAME)
}

# Potentially grab sender from body, if this is a Fogbugz message
if {$senderName eq "FlightAware"} {
	set body [read stdin]
	set senderName [get_sender_from_fogbugz $body]
}

set subject [clean_subject $env(MM_SUBJECT)]
set messageLink "Email: message://%3c[http::formatQuery $env(MM_MESSAGE_ID)]%3e"
set task "Waiting on $senderName re $subject @waiting ::Tasks // $messageLink"

exec "$env(MM_BUNDLE_SUPPORT)/bin/create_task" $task
